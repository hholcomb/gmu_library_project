== README

  1. 24 Apr (HH) - created tag named v1.0 to represent the structrure as it was on 22 Apr and pushed to github

  2. did bundle install to set up the environment

  3. set up the User model using the command
     rails generate scaffold User name:string user_id:string password:string admin:boolean

  4. set up the database with data for User
       a. rake db:create
       b. rake db:migrate
       c. put data into the db/seeds.rb to define 4 regular users: user_1 thru user_1 and 2 privileged users: priv_1 and priv_2.  Passwords are the same for all "password"
       d. rake db:seed
       e. validate the database using
             rails dbconsole
             select * from users;
             .quit
   5. validate all is OK using the web browser to go to localhost:3000 and getting the default rails screen

   6. create the Sessions controller using the command
       rails generate controller Sessions new create destroy

    7. create the Book model using the command
       rails generate scaffold Book isbn:string title:string author:string genre:string abstract:text pages:integer image_cover_url:string published_on:date total_in_library:integer 

       this provides a way to get to the books index page at logon

       run rake db:migrate
       
    8. 26 Apr (HH) - can test out the login functionality from localhost:3000/login

    9. 4 May (HH) - updated db:seeds.rb so that it will not create a new entry for 
          somthing that is already in the DB by using first_or_create
   10. 4 May (HH) push changes to github

   11. brought in from wine_reviews - .../layouts/application.html.erb,
                                                 /_footer.html.erb
                                                 /header.html.erb
                                                 /_sidebar.html.erb
                                     ...shared/_flashes.html.erb
        and modified to work for this project
   12. updated Gemfile to contain bootstrap-sass (as per HW)
   13. ran bundle install
   14. updated app/assets/stylesheets/application.css to specify
                  *= require 'bootstrap'
        (as per HW)
   15. updated session view to separate fields
   16. initial session display now looks much better - but shouldn't contain the sidebar
   16. 4 May (HH) push changes to github
   17. update files to clean up session display
   18. 5 May (HH) push changes to github
   19. clean up the sidebar so that 
              no options are displayed until user is logged in  
              logout button is on the sidebar
              note - the logout clears the session datas
   20. 5 May (HH) push changes to github
   21. test
   22. 10 May safe off existing reservations_controller.rb
   23. have rails generate a resource for the reservation using the command
       student@student-VirtualBox:~/Workspace/gmu_library_project/library$ rails generate resource reservation reserved_on:date due_on:date user:references book:references
      invoke  active_record
      create    db/migrate/20140510183019_create_reservations.rb
      create    app/models/reservation.rb
      invoke    test_unit
      create      test/models/reservation_test.rb
      create      test/fixtures/reservations.yml
      invoke  controller
      create    app/controllers/reservations_controller.rb
      invoke    erb
       exist      app/views/reservations
      invoke    test_unit
      create      test/controllers/reservations_controller_test.rb
      invoke    helper
      create      app/helpers/reservations_helper.rb
      invoke      test_unit
      create        test/helpers/reservations_helper_test.rb
      invoke    assets
      invoke      coffee
      create        app/assets/javascripts/reservations.js.coffee
      invoke      scss
      create        app/assets/stylesheets/reservations.css.scss
      invoke  resource_route
       route    resources :reservations
student@student-VirtualBox:~/Workspace/gmu_library_project/library$ 

   24. replace the generate empty Reservations controller with the one from the team
   25. rake db:migrate    
            reports "reservations" rothe already defined
            return to using the base config/routes.rb file
            rerun rake db:migrate    - all works
   26. update app/model/reservations.rb to specify dependent: :destroy for both book and user
   27. update app/model/book and app/model/user to  know about the resevations
   28. update Reservations controll for the index function modeled after class #11
              app/views/reservations/index.html.erb modeled after class #11
   29. updated new book display- app/views/books/show.html.erb - 
              it was showing the flash 2x  Removed the notice line
   30. updated config/routes from the team to not specify the entry for reservations
             and add a new route to get to the book return function - now works
   31. The Reserve book, view My Reservations and Return book functions now seem to be working
           in a very primitive way.
   32. 16 May - fix problems with deleting a book that had reservations 
   33. 17 May - add Overdue books capability
   34. changed routes so that specific reservation routes come before standard ones - had problem with overdue going to show
   35. modified _sidebar.html.erb so that the menu differentiates between normal and priv user
   36. 17 May - pushed changes to github
   37. 18 May - updated books_controller, (books) index.html and (books) show,html
              to have checks in the show page to determine which functions are for normal users and which for priv users
              removed the extra links from the all books page (index).
              Believe that these two pages now match requirements (except for displaying graphic for book cover page)

              Pushed changes to github




                                      
           



This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.
